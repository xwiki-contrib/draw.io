<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.xwiki.contrib</groupId>
    <artifactId>draw.io-parent</artifactId>
    <version>20.5.0-SNAPSHOT</version>
  </parent>
  <artifactId>draw.io</artifactId>
  <packaging>webjar</packaging>
  <name>draw.io WebJar</name>
  <description>Provides WebJar packaging for the draw.io JavaScript diagramming library.</description>
  <properties>
    <draw.io.webapp.path>${draw.io.path}/src/main/webapp</draw.io.webapp.path>
    <!-- Follow the specifications regarding the WebJar content path. -->
    <webjar.contentDirectory>${project.build.outputDirectory}/META-INF/resources/webjars/${project.artifactId}/${project.version}</webjar.contentDirectory>
  </properties>
  <build>
    <plugins>
      <!-- Download the draw.io sources for the version (tag) we want to use. -->
      <plugin>
        <groupId>com.googlecode.maven-download-plugin</groupId>
        <artifactId>download-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>download-draw.io-sources</id>
            <phase>generate-resources</phase>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <!-- Copy the draw.io resources to the expected WebJar location. -->
          <execution>
            <id>copy-draw.io-resources</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${webjar.contentDirectory}</outputDirectory>
              <resources>
                <resource>
                  <directory>${draw.io.webapp.path}</directory>
                  <excludes>
                    <exclude>WEB-INF/**</exclude>
                    <exclude>js/dropbox/**</exclude>
                    <exclude>js/onedrive/**</exclude>
                    <!-- We exclude all the HTML files here and we include the ones we want below. -->
                    <exclude>*.html</exclude>
                    <exclude>cache.manifest</exclude>
                    <exclude>favicon.ico</exclude>
                    <exclude>package.json</exclude>
                    <exclude>yarn.lock</exclude>
                  </excludes>
                </resource>
                <resource>
                  <directory>${draw.io.webapp.path}</directory>
                  <includes>
                    <!-- This is required by File / Open Library from / Browser... -->
                    <include>open.html</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
          <!-- Copy the draw.io license. -->
          <execution>
            <id>copy-draw.io-license</id>
            <phase>prepare-package</phase>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.github.blutorange</groupId>
        <artifactId>closure-compiler-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>default-minify</id>
            <configuration>
              <sourceDir>${project.version}/js</sourceDir>
              <targetDir>${project.version}/js</targetDir>
              <excludes>
                <exclude>**/*.min.js</exclude>
                <!-- We minify the bundle instead. -->
                <exclude>diagramly/**/*.js</exclude>
                <exclude>embed.dev.js</exclude>
              </excludes>
            </configuration>
          </execution>
          <execution>
            <!-- Override the default WebJar JavaScript aggregation step to aggregate the draw.io editor code.. -->
            <id>default-minify-1</id>
            <configuration>
              <sourceDir>${project.version}/js/diagramly</sourceDir>
              <targetDir>${project.version}/js</targetDir>
              <outputFilename>draw.io.min.js</outputFilename>
              <includes>
                <!--                                           -->
                <!-- The following list is taken from Devel.js -->
                <!--                                           -->

                <!-- We don't include the dependencies (spin, base64, etc.). We load them with require.js -->

                <!-- We don't include the mxGraph client/editor. We load them with requrie.js -->

                <!-- Main classes -->
                <include>sidebar/*.js</include>
                <include>util/*.js</include>
                <include>DrawioFile.js</include>
                <include>LocalFile.js</include>
                <include>LocalLibrary.js</include>
                <include>StorageFile.js</include>
                <include>StorageLibrary.js</include>
                <include>RemoteFile.js</include>
                <include>RemoteLibrary.js</include>
                <include>Dialogs.js</include>
                <include>Editor.js</include>
                <include>EditorUi.js</include>
                <include>DiffSync.js</include>
                <include>Settings.js</include>
                <include>DrawioFileSync.js</include>

                <!-- Comments -->
                <include>DrawioComment.js</include>
                <!-- We don't include DriveComment.js -->

                <!-- Integrations with external services -->
                <include>DrawioClient.js</include>
                <include>DrawioUser.js</include>
                <include>UrlLibrary.js</include>
                <!-- We don't include the integration with Google Drive, Dropbox, etc. -->

                <include>App.js</include>
                <include>Menus.js</include>
                <include>Pages.js</include>
                <include>Trees.js</include>
                <include>Minimal.js</include>
                <include>DistanceGuides.js</include>
                <include>mxRuler.js</include>
                <include>mxFreehand.js</include>
                <!-- We don't include the development tools. -->

                <!-- Vsdx/vssx support -->
                <include>vsdx/*.js</include>

                <!-- We load jszip with require.js -->

                <!-- GraphML import -->
                <include>graphml/*.js</include>

                <include>mxTableLayout.js</include>
              </includes>
            </configuration>
          </execution>
          <execution>
            <!-- Aggregate the draw.io viewer code. -->
            <id>agregate-drawio-viewer</id>
            <phase>compile</phase>
            <goals>
              <goal>minify</goal>
            </goals>
            <configuration>
              <baseSourceDir>${project.build.outputDirectory}/META-INF/resources/webjars/${project.artifactId}</baseSourceDir>
              <sourceDir>${project.version}/js/diagramly</sourceDir>
              <baseTargetDir>${project.build.outputDirectory}/META-INF/resources/webjars/${project.artifactId}</baseTargetDir>
              <targetDir>${project.version}/js</targetDir>
              <skipMerge>false</skipMerge>
              <!-- Include the polyfills in the aggregated JavaScript file. -->
              <closureRewritePolyfills>true</closureRewritePolyfills>
              <!-- There's no configuration option to keep the unminified aggregated file so we include its source
                in the generated source map file.  -->
              <closureIncludeSourcesContent>true</closureIncludeSourcesContent>
              <outputFilename>draw.io.viewer.min.js</outputFilename>
              <includes>
                <!-- This is required by the light box mode. -->
                <include>Pages.js</include>
                <!-- This is required by the tool bar (addSvgShadow) -->
                <include>Editor.js</include>
                <!-- This is required by the light box mode (setFileData). -->
                <include>EditorUi.js</include>
                <!-- This is required to view the diagram. -->
                <include>GraphViewer.js</include>
              </includes>
            </configuration>
          </execution>
          <execution>
            <!-- Aggregate the draw.io initialization code. -->
            <id>agregate-drawio-init</id>
            <phase>compile</phase>
            <goals>
              <goal>minify</goal>
            </goals>
            <configuration>
              <baseSourceDir>${project.build.outputDirectory}/META-INF/resources/webjars/${project.artifactId}</baseSourceDir>
              <sourceDir>${project.version}/js</sourceDir>
              <baseTargetDir>${project.build.outputDirectory}/META-INF/resources/webjars/${project.artifactId}</baseTargetDir>
              <targetDir>${project.version}/js</targetDir>
              <skipMerge>false</skipMerge>
              <!-- Include the polyfills in the aggregated JavaScript file. -->
              <closureRewritePolyfills>true</closureRewritePolyfills>
              <!-- There's no configuration option to keep the unminified aggregated file so we include its source
                in the generated source map file.  -->
              <closureIncludeSourcesContent>true</closureIncludeSourcesContent>
              <outputFilename>draw.io.init.min.js</outputFilename>
              <includes>
                <include>diagramly/Init.js</include>
                <!-- Fall-back on the Graph Editor defaults. -->
                <include>grapheditor/Init.js</include>
              </includes>
            </configuration>
          </execution>
          <execution>
            <!-- Agregate the grapheditor code, which replaces the archived mxgraph. -->
            <id>agregate-drawio-grapheditor</id>
            <phase>compile</phase>
            <goals>
              <goal>minify</goal>
            </goals>
            <configuration>
              <baseSourceDir>${project.build.outputDirectory}/META-INF/resources/webjars/${project.artifactId}</baseSourceDir>
              <sourceDir>${project.version}/js/grapheditor</sourceDir>
              <baseTargetDir>${project.build.outputDirectory}/META-INF/resources/webjars/${project.artifactId}</baseTargetDir>
              <targetDir>${project.version}/js</targetDir>
              <skipMerge>false</skipMerge>
              <!-- Include the polyfills in the aggregated JavaScript file. -->
              <closureRewritePolyfills>true</closureRewritePolyfills>
              <!-- There's no configuration option to keep the unminified aggregated file so we include its source
                in the generated source map file.  -->
              <closureIncludeSourcesContent>true</closureIncludeSourcesContent>
              <outputFilename>draw.io.grapheditor.min.js</outputFilename>
              <!-- We provide the list of includes rather than the excludes to specify the aggregate order. -->
              <includes>
                <include>Actions.js</include>
                <include>Dialogs.js</include>
                <include>Editor.js</include>
                <include>EditorUi.js</include>
                <include>Graph.js</include>
                <include>Format.js</include>
                <include>Menus.js</include>
                <include>Shapes.js</include>
                <include>Sidebar.js</include>
                <include>Toolbar.js</include>
              </includes>
            </configuration>
          </execution>
          <execution>
            <!-- Agregate the graphviewer code, which replaces the archived mxgraph. -->
            <id>agregate-drawio-graphviewer</id>
            <phase>compile</phase>
            <goals>
              <goal>minify</goal>
            </goals>
            <configuration>
              <baseSourceDir>${project.build.outputDirectory}/META-INF/resources/webjars/${project.artifactId}</baseSourceDir>
              <sourceDir>${project.version}/js/grapheditor</sourceDir>
              <baseTargetDir>${project.build.outputDirectory}/META-INF/resources/webjars/${project.artifactId}</baseTargetDir>
              <targetDir>${project.version}/js</targetDir>
              <skipMerge>false</skipMerge>
              <!-- Include the polyfills in the aggregated JavaScript file. -->
              <closureRewritePolyfills>true</closureRewritePolyfills>
              <!-- There's no configuration option to keep the unminified aggregated file so we include its source
                in the generated source map file.  -->
              <closureIncludeSourcesContent>true</closureIncludeSourcesContent>
              <outputFilename>draw.io.graphviewer.min.js</outputFilename>
              <includes>
                <include>Graph.js</include>
                <include>Shapes.js</include>
                <include>Editor.js</include>
                <include>EditorUi.js</include>
                <include>Actions.js</include>
                <include>Format.js</include>
              </includes>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.github.searls</groupId>
        <artifactId>jasmine-maven-plugin</artifactId>
        <!-- Skip the execution of the Jasmine tests. -->
        <executions>
          <execution>
            <id>default-test</id>
            <phase>none</phase>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
